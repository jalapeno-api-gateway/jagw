syntax = "proto2";
package jagw;

option go_package = "github.com/jalapeno-api-gateway/jagw-go;jagw";

import "core/base.proto";

message LsNode {
	required string key = 1;
	optional string id = 2;
	optional string router_hash = 3;
	optional int64 domain_id = 4;
	optional string router_ip = 5;
	optional string peer_hash = 6;
	optional string peer_ip = 7;
	optional uint32 peer_asn = 8;
	optional string timestamp = 9;
	optional string igp_router_id = 10;
	optional uint32 asn = 11;
	repeated MultiTopologyIdentifier mtid = 12;
	optional string area_id = 13;
	optional string protocol = 14;
	optional uint32 protocol_id = 15; // protobuf does not support uint8
	optional string name = 16;
	optional string rev = 17;
	optional uint32 peer_type = 18; // protobuf does not support uint8
	repeated uint32 sr_algorithm = 19; 
	optional Srv6CapabilitiesTlv srv6_capabilities_tlv = 20;
	repeated NodeMsd node_msd = 21;	
	repeated FlexAlgoDefinition flex_algo_definition = 22;
	optional bool is_adj_rib_in_post_policy = 23;
	optional bool is_adj_rib_out_post_policy = 24;
	optional bool is_loc_rib_filtered = 25;
}

message LsLink {
	required string key = 1;
	optional string id = 2;
	optional string router_hash = 3;
	optional string router_ip = 4;
	optional int64 domain_id = 5;
	optional string peer_hash = 6;
	optional string peer_ip = 7;
	optional uint32 peer_asn = 8;
	optional string timestamp = 9;
	optional string igp_router_id = 10;
	optional string protocol = 11;
	optional string area_id = 12;
	optional string nexthop = 13;
	optional MultiTopologyIdentifier mtid = 14;
	optional uint32 local_link_id = 15;
	optional uint32 remote_link_id = 16;
	optional string local_link_ip = 17;
	optional string remote_link_ip = 18;
	optional uint32 igp_metric = 19;
	optional string remote_node_hash = 20;
	optional string local_node_hash = 21;
	optional string remote_igp_router_id = 22;
	optional uint32 unidir_link_delay = 23;
	repeated uint32 unidir_link_delay_min_max = 24;
	optional uint64 max_link_bw_kbps = 25;
	optional uint32 unidir_delay_variation = 26;
	optional uint32 unidir_packet_loss = 27;
	optional uint32 unidir_residual_bw = 28;
	optional uint32 unidir_available_bw = 29;
	optional uint32 unidir_bw_utilization = 30;
	optional double normalized_unidir_link_delay = 31;
	optional double normalized_unidir_delay_variation = 32;
	optional double normalized_unidir_packet_loss = 33;
	optional double undir_packet_loss_percentage = 34;
	optional string rev = 35;
	optional uint32 peer_type = 36; // protobuf does not support uint8
	optional uint32 protocol_id = 37; // protobuf does not support uint8
	optional uint32 local_node_asn = 38;
	optional uint32 remote_node_asn = 39;
	repeated Srv6EndXSidTlv srv6_endx_sid = 40;
	optional bool is_adj_rib_in_post = 41;
	optional bool is_adj_rib_out_post = 42;
	optional bool is_loc_rib_filtered = 43;
}

message LsPrefix {
	required string key = 1;
	optional string id = 2;
	optional string router_hash = 3;
	optional string router_ip = 4;
	optional int64 domain_id = 5;
	optional string peer_hash = 6;
	optional string peer_ip = 7;
	optional uint32 peer_asn = 8;
	optional string timestamp = 9;
	optional string igp_router_id = 10;
	optional string protocol = 11;
	optional string area_id = 12;
	optional string nexthop = 13;
	optional string local_node_hash = 14;
	optional MultiTopologyIdentifier mtid = 15;
	optional string prefix = 16;
	optional int32 prefix_len = 17;
	optional uint32 prefix_metric = 18;
	optional string rev = 19;
	optional uint32 peer_type = 20; // protobuf does not support uint8
	optional uint32 protocol_id = 21; // protobuf does not support uint8
	optional Srv6LocatorTlv srv6_locator = 22;
	optional bool is_adj_rib_in_post = 23;
	optional bool is_adj_rib_out_post = 24;
	optional bool is_loc_rib_filtered = 25;
}

message LsSrv6Sid {
	required string key = 1;
	optional string id = 2;
	optional string router_hash = 3;
	optional string router_ip = 4;
	optional int64 domain_id = 5;
	optional string peer_hash = 6;
	optional string peer_ip = 7;
	optional uint32 peer_asn = 8;
	optional string timestamp = 9;
	optional string igp_router_id = 10;
	optional uint32 local_node_asn = 11;
	optional string protocol = 12;
	optional string nexthop = 13;
	optional string local_node_hash = 14;
	optional MultiTopologyIdentifier mtid = 15;
	optional uint32 igp_flags = 16; // protobuf does not support uint8
	optional string srv6_sid = 17;
	optional string rev = 18;
	optional uint32 peer_type = 19; // protobuf does not support uint8
	optional uint32 protocol_id = 20; // protobuf does not support uint8
	optional Srv6EndpointBehavior srv6_endpoint_behavior = 21;
	optional Srv6SidStructure srv6_sid_structure = 22;
	optional bool is_adj_rib_in_post = 23;
	optional bool is_adj_rib_out_post = 24;
	optional bool is_loc_rib_filtered = 25;
}

message LsNodeEdge {
	required string key = 1;
	optional string id = 2;
	optional string from = 3;
	optional string to = 4;
	optional string link = 5;
}

message LsNodeCoordinates {
	required string key = 1;
	optional string id = 2;
	required string ls_node_key = 3;
	required double latitude = 4;
	required double longitude = 5;
}

message Peer{
	required string key = 1;
	optional string id = 2;
	optional string router_hash = 3;
	optional string remote_bgp_id = 4;
	optional string local_bgp_id = 5;
}